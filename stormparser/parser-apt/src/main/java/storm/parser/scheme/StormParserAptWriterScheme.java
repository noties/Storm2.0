package storm.parser.scheme;

import java.util.Date;
import java.util.List;

import javax.annotation.processing.Filer;
import javax.lang.model.element.Element;
import javax.lang.model.element.TypeElement;
import javax.lang.model.type.TypeMirror;
import javax.lang.model.util.Elements;

import storm.parser.Indent;
import storm.parser.StormParserAptData;
import storm.parser.StormParserAptWriterBase;
import storm.parser.StormParserColumn;
import storm.parser.StormParserTable;

/**
 * Created by Dimitry Ivanov on 17.01.2016.
 */
public class StormParserAptWriterScheme extends StormParserAptWriterBase {

    private static final String ON_UPGRADE_OLD = "oldVersion";
    private static final String ON_UPGRADE_NEW = "newVersion";
    private static final String IS_UPGRADE_VERSION_PATTERN = "%1$d > %2$s && %1$d <= %3$s";

    public StormParserAptWriterScheme(Elements elements, Filer filer) {
        super(elements, filer, StormSchemeAptNameBuilder.getInstance());
    }

    @Override
    protected boolean shouldCreateSourceCodeFile(StormParserAptData data) {
        return data.scheme();
    }

    @Override
    protected String getSourceCode(String packageName, String className, String type, StormParserAptData data) throws Throwable {

        final Indent indent = indent();
        final StringBuilder builder = new StringBuilder();

        final StormParserTable<TypeElement, Element, TypeMirror> table = data.getTable();

        // package
        builder.append("package ").append(packageName).append(";\n\n");

        // generated info
        builder.append("// This file is generated by StormScheme library at ")
                .append(new Date())
                .append("\n// do not modify\n\n");

        // class definition
        builder.append("public class ")
                .append(className)
                .append(" implements ")
                .append(StormScheme.class.getName())
                .append(" {\n\n");

        // public empty constuctor
        builder.append(indent.increment())
                .append("public ")
                .append(className)
                .append("() {}\n\n");

        // onCreate
        builder.append(indent)
                .append("@Override public java.util.List<String> onCreate() {\n")
                .append(generateOnCreateStatementsSourceBlock(indent, table))
                .append("}\n\n");

        // onUpgrade
        builder.append(indent)
                .append("@Override public java.util.List<String> onUpgrade(int ")
                .append(ON_UPGRADE_OLD)
                .append(", int ")
                .append(ON_UPGRADE_NEW)
                .append(") {\n")
                .append(generateOnUpgradeStatementsSourceBlock(indent, table))
                .append("}\n\n");


        // end class definition
        builder.append("}");

        return builder.toString();
    }

    private static String generateOnCreateStatementsSourceBlock(Indent indent, StormParserTable<TypeElement, Element, TypeMirror> table) {

        final StormSchemeStatementsGenerator generator = new StormSchemeStatementsGenerator(table);
        final List<String> statements = generator.onCreate();

        final StringBuilder builder = new StringBuilder()
                .append(indent.increment());

        if (statements.size() == 1) {
            builder.append("return java.util.Collections.singletonList(\"")
                    .append(statements.get(0))
                    .append("\");\n")
                    .append(indent.decrement());
            return builder.toString();
        }

        builder.append("return java.util.Arrays.asList(\n")
                .append(indent.increment());

        boolean isFirst = true;
        for (String statement: statements) {
            if (isFirst) {
                isFirst = false;
            } else {
                builder.append(",\n").append(indent);
            }
            builder.append('\"')
                    .append(statement)
                    .append('\"');
        }

        builder.append("\n").append(indent.decrement()).append(");\n").append(indent.decrement());

        return builder.toString();
    }

    private static String generateOnUpgradeStatementsSourceBlock(Indent indent, StormParserTable<TypeElement, Element, TypeMirror> table) {

        final StringBuilder builder = new StringBuilder();

        if (table.isRecreateOnUpgrade()) {
            final StormSchemeStatementsGenerator generator = new StormSchemeStatementsGenerator(table);
            builder.append(indent.increment())
                    .append("return java.util.Arrays.asList(\n")
                    .append(indent.increment())
                    .append("\"DROP TABLE ")
                    .append(table.getTableName())
                    .append(" IF EXISTS;\"");

            for (String statement: generator.onCreate()) {
                builder.append(",\n")
                        .append(indent)
                        .append("\"")
                        .append(statement)
                        .append("\"");
            }

            builder.append("\n")
                    .append(indent.decrement())
                    .append(");\n")
                    .append(indent.decrement());

            return builder.toString();

        }

        boolean hasAddedStatements = false;
        boolean hasAddedIndexes = false;

        final int tableVersion = table.getVersionWhenAdded();

        final String startedIndent = indent.increment().toString();
        final String list = "final java.util.List<String> list = new java.util.ArrayList<String>();\n";
        final String indexes = "final java.util.List<String> indexes = new java.util.ArrayList<String>();\n";

        if (tableVersion != 0) {

            hasAddedStatements = true;

            builder.append(indent)
                    .append("if (")
                    .append(isUpgradeBoolString(tableVersion))
                    .append(") {\n")
                    .append(indent.increment());

            builder.append("final java.util.List<String> columns = new java.util.ArrayList<String>();\n");

            int columnVersion;
            for (StormParserColumn column: table.getElements()) {
                columnVersion = column.getVersionWhenAdded();
                if (columnVersion == 0) {
                    builder.append(indent)
                            .append("columns.add(\"")
                            .append(StormSchemeStatementsGenerator.getColumnCreateStatement(column))
                            .append("\");\n");
                    if (column.getIndex() != null) {

                        builder.append(indent)
                                .append("indexes.add(\"")
                                .append(StormSchemeStatementsGenerator.getColumnIndexStatement(table.getTableName(), column.getName(), column.getIndex()))
                                .append("\");\n");

                        hasAddedIndexes = true;
                    }
                } else {
                    builder.append(indent)
                            .append("if (")
                            .append(isUpgradeBoolString(columnVersion))
                            .append(") {\n")
                            .append(indent.increment())
                            .append("columns.add(\"")
                            .append(StormSchemeStatementsGenerator.getColumnCreateStatement(column))
                            .append("\");\n");
                    if (column.getIndex() != null) {
                        builder.append(indent)
                                .append("indexes.add(\"")
                                .append(StormSchemeStatementsGenerator.getColumnIndexStatement(table.getTableName(), column.getName(), column.getIndex()))
                                .append("\");\n");
                    }
                    builder.append(indent.decrement())
                            .append("}\n");
                }
            }

            // builder statement
            builder.append(indent)
                    .append("if (columns.size() > 0) {\n")
                    .append(indent.increment())
                    .append("final java.lang.StringBuilder builder = new java.lang.StringBuilder();\n")
                    .append(indent)
                    .append("builder.append(\"")
                    .append("CREATE TABLE ")
                    .append(table.getTableName())
                    .append("(\");\n")
                    .append(indent)
                    .append("boolean isFirst = true;\n")
                    .append(indent)
                    .append("for (String column: columns) {\n")
                    .append(indent.increment())
                    .append("if (isFirst) isFirst = false;\n")
                    .append(indent)
                    .append("else builder.append(\", \");\n")
                    .append(indent)
                    .append("builder.append(column);\n")
                    .append(indent.decrement())
                    .append("}\n")
                    .append(indent)
                    .append("builder.append(\");\");\n")
                    .append(indent)
                    .append("list.add(builder.toString());\n")
                    .append(indent.decrement())
                    .append("}\n");

            // else statement when it's not table upgrade (ALTER TABLE)
            builder.append(indent.decrement())
                    .append("} else {\n");

            indent.increment();
        }

        for (StormParserColumn column: table.getElements()) {
            if (column.getVersionWhenAdded() > 0) {

                builder.append(indent)
                        .append("if (")
                        .append(isUpgradeBoolString(column.getVersionWhenAdded()))
                        .append(") {\n")
                        .append(indent.increment())
                        .append("list.add(\"")
                        .append(StormSchemeStatementsGenerator.getAlterTableAddColumnStatement(table.getTableName(), column))
                        .append("\");\n");

                hasAddedStatements = true;

                if (column.getIndex() != null) {

                    builder.append(indent)
                            .append("indexes.add(\"")
                            .append(StormSchemeStatementsGenerator.getColumnIndexStatement(table.getTableName(), column.getName(), column.getIndex()))
                            .append("\");\n");

                    hasAddedIndexes = true;
                }
                builder.append(indent.decrement())
                        .append("}\n");
            }
        }

        if (tableVersion != 0) {
            builder.append(indent.decrement())
                    .append("}\n");
        }

        if (hasAddedIndexes) {
            builder.append(indent)
                    .append("list.addAll(indexes);\n");
        }

        final String returnValue;
        if (hasAddedStatements) {
            returnValue = "list";
        } else {
            returnValue = "null";
        }

        builder.append(indent)
                .append("return ")
                .append(returnValue)
                .append(";\n")
                .append(indent.decrement());

        if (hasAddedIndexes) {
            builder.insert(0, indexes).insert(0, startedIndent);
        }

        if (hasAddedStatements) {
            builder.insert(0, list).insert(0, startedIndent);
        }

        return builder.toString();
    }

    private static String isUpgradeBoolString(int version) {
        return String.format(IS_UPGRADE_VERSION_PATTERN, version, ON_UPGRADE_OLD, ON_UPGRADE_NEW);
    }
}
